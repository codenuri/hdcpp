디자인 패턴 
=> 특정 문제를 해결하기 위해 사용된 전형적인 코딩 기법에 "이름"을 부여 한것
=> GOF's 책에서는 23개의 이름을 소개
=> 대부분의 객체지향 언어로 구현 가능한 일반적인 기법 사용 
=> ex : prototype, template method, strategy

=> 각 언어의 고유 특징(장점)을 잘 나타나지 않음. 

IDioms
=> 각 언어의 문법적 특징을 고려한 디자인 기법
=> C++ IDioms, Java IDioms, C# IDioms
=> 구글 "C++ IDioms" 에서 1번째 링크
=> policy base design

==============================================================================
디자인 패턴의 핵심 원리 #1. 변하지 않은 코드에서 변하는 코드는 분리하는 것

#1. 변하는 코드는 가상함수로 분리
=> 의도 : 파생 클래스를 만들어서 가상함수를 override 하라는 것
=> 예제 : 도형편집기 예제의 draw()/draw_imp()
=> template method


#2. 변하는 코드를 다른 클래스로 분리(정책 클래스)

정책 클래스가 지켜야 하는 규칙을 어떻게 약속하고, 
정책 클래스를 어떻게 교체 가능하게 할것 인가 ?

strategy : 함수 이름을 인터페이스로 약속하고, 인터페이스를 사용해서 교체 가능하게!
policy base design : 함수 이름을 문서화로 약속하고, template 인자를 통해서 교체 가능하게!


							성능				실행시간 교체 가능 여부
strategy 			: 		느리다(가상함수)	 가능
policy base design 	:       빠르다(인라인도가능) 불가능
							템플릿이므로 여러개 
							생성하면 코드메모리
							증가
//---------------------------------------------
// 객체지향 디자인 패턴의 핵심 #2. 재귀적 포함을 많이 사용합니다.

// A 는 B 를 포함하지만 A 자신도 포함합니다.
// => A와 B 는 공통의 기반 클래스 필요

// 왜 ?? "어떤의도"로 재귀적 포함을 사용하는가에 따라 다른 패턴

// composite : 재귀적 포함을 사용한 복합객체 만들기
// decorator : 재귀적 포함을 사용한 객체에 기능 추가
